warn('[TEMPEST HUB] Loading Bypass')
wait(1)
warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/TrapstarKSSKSKSKKS/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
Library:Notify('Welcome to Tempest Hub', 5)

local Window = Library:CreateWindow({
    Title = 'Tempest Hub | Dragon Soul',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Dragon Soul Script', 5)
warn('[TEMPEST HUB] Loading Function')
wait(1)
warn('[TEMPEST HUB] Loading Toggles')
wait(1)
warn('[TEMPEST HUB] Last Checking')
wait(1)

local TweenService = game:GetService("TweenService")
local speed = 1000

function tweenModel(model, targetCFrame)
    local duration = (model.PrimaryPart.Position - targetCFrame.Position).Magnitude / speed
    local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    
    local cframeValue = Instance.new("CFrameValue")
    cframeValue.Value = model:GetPrimaryPartCFrame()
    
    cframeValue:GetPropertyChangedSignal("Value"):Connect(function()
        model:SetPrimaryPartCFrame(cframeValue.Value)
    end)
    
    local tween = TweenService:Create(cframeValue, info, {
        Value = targetCFrame,
    })
    
    tween:Play()
    tween.Completed:Connect(function()
        cframeValue:Destroy()
    end)
end

function GetCFrame(obj, height, angle)
    local cframe = CFrame.new()

    if typeof(obj) == "Vector3" then
        cframe = CFrame.new(obj)
    elseif typeof(obj) == "table" then
        cframe = CFrame.new(unpack(obj))
    elseif typeof(obj) == "string" then
        local parts = {}
        for val in obj:gmatch("[^,]+") do
            table.insert(parts, tonumber(val))
        end
        if #parts >= 3 then
            cframe = CFrame.new(unpack(parts))
        end
    elseif typeof(obj) == "Instance" then
        if obj:IsA("Model") then
            local rootPart = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChild("Torso")
            if rootPart then
                cframe = rootPart.CFrame
            end
        elseif obj:IsA("Part") then
            cframe = obj.CFrame
        end
    end

    -- Apply height and angle adjustments
    if height then
        cframe = cframe + Vector3.new(0, height, 0)
    end
    if angle then
        cframe = cframe * CFrame.Angles(0, math.rad(angle), 0)
    end
    
    return cframe
end

local selectedEnemie = "None"
local selectedAtaque = "None"
local autoAttackEnabled = false

local function autoAtaque()
    while true do
        if autoAttackEnabled then
            if selectedEnemie ~= "None" then
                local character = workspace.Main.Live:FindFirstChild(selectedEnemie)
                if character then
                    local position = character.HumanoidRootPart.Position
                    local cframe = character.HumanoidRootPart.CFrame
                    
                    local targetCFrame = GetCFrame(character, selectedDistance, 0)
                    tweenModel(game.Players.LocalPlayer.Character, targetCFrame)
                    local args = {
                        {
                            true,
                            " ",
                            {
                                "\1",
                                {
                                    ID = selectedAtaque,
                                    Action = "Charge",
                                    Params = {}
                                }
                            },
                            "d"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                    
                    -- Disparar a habilidade na posição do personagem
                    args = {
                        {
                            {
                                "\1",
                                {
                                    ID = selectedAtaque,
                                    Action = "Fire",
                                    Params = {
                                        position,
                                        cframe
                                    }
                                }
                            },
                            "d"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                    
                    -- Parar de carregar a habilidade
                    args = {
                        {
                            false,
                            " "
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                end
            end
            wait() -- Adiciona um pequeno atraso para não sobrecarregar o cliente
        else
            wait() -- Adiciona um pequeno atraso quando o ataque automático estiver desativado
        end
    end
end


function autochargeaura()
    while getgenv().autochargeaura == true do 
        local kitohotbar = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
        if kitohotbar then
            local children = kitohotbar:GetChildren()
        
            for _, child in ipairs(children) do
                if child.Name == "Hotbar" then
                    local hotbarChildren = child:GetChildren()
                    for _, hotbarChild in ipairs(hotbarChildren) do
                        local frametostatbar = hotbarChild.Bar
                        if frametostatbar then
                            local frameChildren = frametostatbar:GetChildren()
                            for _, frameChild in ipairs(frameChildren) do
                                local blacklist = {
                                    ["Buttons"] = true,
                                }
                                if not blacklist[frameChild.Name] then
                                    if frameChild.ki.Bar.Background.Stat.Text == "Hold C to charge Ki" then 
                                        local args = {
                                            [1] = true
                                        }
                                    
                                        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ChargeEvent"):FireServer(unpack(args))
                                    else
                                        local args = {
                                            [1] = false
                                        }
                                    
                                        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ChargeEvent"):FireServer(unpack(args))
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait() -- Adiciona um pequeno atraso para não sobrecarregar o cliente
    end 
end


function autostatsS()
    while getgenv().autostatsS == true do
    local args = {
        [1] = {
            [1] = {
                ["Stat"] = "Strength",
                ["Amount"] = 1
            },
            [2] = "W"
        }
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
    wait()
    end    
end

function autostatsPK()
    while getgenv().autostatsPK == true do
        local args = {
            [1] = {
                [1] = {
                    ["Stat"] = "KiPower",
                    ["Amount"] = 1
                },
                [2] = "W"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))   
        wait()     
    end    
end

function autostatsH()
    while getgenv().autostatsH == true do
        local args = {
            [1] = {
                [1] = {
                    ["Stat"] = "MaxHealth",
                    ["Amount"] = 1
                },
                [2] = "W"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))   
        wait()     
    end    
end

function autostatsMK()
    while getgenv().autostatsMK == true do
        local args = {
            [1] = {
                [1] = {
                    ["Stat"] = "KiMax",
                    ["Amount"] = 1
                },
                [2] = "W"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))      
        wait()  
    end    
end

function autogetdragonball()
    while getgenv().autogetdragonball == true do
        local dragonball = workspace.DragonBallSpawner
        local children = dragonball:GetChildren()

        for _, child in ipairs(children) do
            local targetCFrame = GetCFrame(child.CFrame)
            tweenModel(game.Players.LocalPlayer.Character, targetCFrame)
            wait()
        end
    end
end

-- function to find the nearest NPC
function findNearestNPC(player) 

    local npcs = workspace.Main.Live

local distance = selectedDistance

local nearestnpc = nil -- npc model

-- get the VirtualUser service
local vu = game:GetService("VirtualUser")
    -- initialize the shortest distance
    local shortestDistance = math.huge 

    -- initialize the nearest NPC
    local nearestNPC = nil

    -- loop through all NPCs
    for _, npc in ipairs(npcs:GetChildren()) do
        -- check if the NPC is not a player character
        if not game.Players:GetPlayerFromCharacter(npc) then
            -- calculate the distance to the NPC
            local distance = (npc:WaitForChild("HumanoidRootPart").Position - player.Character.PrimaryPart.Position).magnitude

            -- if this distance is shorter than the current shortest distance, update the shortest distance and nearest NPC
            if distance < shortestDistance then
                shortestDistance = distance
                nearestNPC = npc
                -- you can use 'print(nearestNPC)' to see the selected npc
            end
        end
    end

    -- return the nearest NPC and its distance to the player
    return nearestNPC, shortestDistance
end

-- main loop for farming NPCs
function killaura()
    while getgenv().killaura == true do -- adicionado 'do' para fechar o loop
        local npcs = workspace.Main.Live

local distance = selectedDistance

local nearestnpc = nil -- npc model

-- get the VirtualUser service
local vu = game:GetService("VirtualUser")
        -- find the nearest NPC and its distance to the player
        local nearestNPC, distance = findNearestNPC(game.Players.LocalPlayer)
        
        -- if there is a nearest NPC within range and it's not a player character, attack it
        if nearestNPC and distance <= selectedKillauraRange and not game.Players:GetPlayerFromCharacter(nearestNPC) then

            -- simulate a mouse click
            vu:Button1Down(Vector2.new(1000, 1000), workspace.CurrentCamera.CFrame)
            
            -- set up attack 
            local main = {
                ["Victim"] = nearestNPC,
                ["Type"] = "Light",
                ["VictimPosition"] = nearestNPC:WaitForChild("HumanoidRootPart").Position,
                ["CurrentHeavy"] = 1,
                ["CurrentLight"] = 1,
                ["CurrentLightCombo"] = 1,
                ["LocalInfo"] = {
                    ["Flying"] = false
                },
                ["AnimSet"] = "Generic"
            }

            -- send an attack request
            game:GetService("ReplicatedStorage").Events.TryAttack:FireServer(main)
        end
        
        -- wait before repeating the loop
        wait()
    end
end -- adicionado 'end' para fechar a função

function autogetquest()
    while getgenv().autogetquest == true do
        local quest = game:GetService("Players").LocalPlayer.PlayerGui.Quests.Frame:FindFirstChild(selectedQuest)
        
        if quest then
            local children = quest:GetChildren()
            local blacklist = {
                ["AspectRatio"] = true,
                ["Padding"] = true,
                ["Title"] = true,
                ["BottomPadding"] = true,
                ["UIScale"] = true,
                ["OverallProgress"] = true,
                ["UIListLayout"] = true,
            }
            for i, parte2child in ipairs(children) do
                if not blacklist[parte2child.Name] then
                    local questUI = parte2child
                    local children = questUI:GetChildren()
                    local blacklist = {
                        ["AspectRatio"] = true,
                        ["Padding"] = true,
                        ["Title"] = true,
                        ["BottomPadding"] = true,
                        ["UIScale"] = true,
                        ["OverallProgress"] = true,
                        ["UIListLayout"] = true,
                    }
                        for i, questUIchild in ipairs(children) do
                            if not blacklist[questUIchild.Name] then
                                wait()
                        end
                    end
                end
            end
        else
            local args = {
                    [1] = 1
                }
                
                game:GetService("Players").LocalPlayer.QuestRemoteEvents:WaitForChild(selectedQuest):FireServer(unpack(args))
            wait()
        end        
    end
end

function autogetdrop()
    while getgenv().autogetdrop == true do
        local activedrops = game.workspace.ActiveDrops
        local children = activedrops:GetChildren()
        
        for _, child in ipairs(children) do
            local args = {
            [1] = {
            [1] = activedrops,
            [2] = "!"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
        wait(waittimeDrop)
        end
    end
end

function walkspeed()
    while getgenv().walkspeed == true do
        local player = game.Players.LocalPlayer
        local Live = game.workspace.Main.Live
        local children = Live:GetChildren()

        for _, Livechild in ipairs(children) do
            if Livechild == player.Character then
                local playerHumanoid = Livechild.Humanoid
                playerHumanoid.WalkSpeed = WalkSpeedValue
                print(playerHumanoid.WalkSpeed)
            end
        end
        wait() -- Adicionando uma pausa para não consumir recursos desnecessários
    end
end

function jumppower()
    while getgenv().jumppower == true do
        local player = game.Players.LocalPlayer
        local Live = game.workspace.Main.Live
        local children = Live:GetChildren()

        for _, Livechild in ipairs(children) do
            if Livechild == player.Character then
                local playerHumanoid = Livechild.Humanoid
                playerHumanoid.jumppower = jumppowerValue
                print(playerHumanoid.jumppower)
            end
        end
        wait() -- Adicionando uma pausa para não consumir recursos desnecessários
    end
end

local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('Auto Charge', {
    Text = 'Auto Charge',
    Default = false,
    Callback = function(Value)
        getgenv().autochargeaura = Value
        autochargeaura()
    end
})

LeftGroupBox:AddToggle('Killaura', {
    Text = 'Kill Aura',
    Default = false,
    Callback = function(Value)
        getgenv().killaura = Value
        killaura()
    end
})

LeftGroupBox:AddToggle('AutoGetDrop', {
    Text = 'Auto Get Drop',
    Default = false,
    Callback = function(Value)
        getgenv().autogetdrop = Value
        autogetdrop()
    end
})

LeftGroupBox:AddSlider('DistanceKillaura', {
    Text = 'Distance of Kill Aura',
    Default = 0,
    Min = 0,
    Max = 1000,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        selectedKillauraRange = Value
    end
})

LeftGroupBox:AddSlider('DistanceKillaura', {
    Text = 'Distance of Kill Aura',
    Default = 0,
    Min = 1,
    Max = 30,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        waittimeDrop = Value
    end
})

LeftGroupBox:AddSlider('Walkspeed', {
    Text = 'Walkspeed',
    Default = 0,
    Min = 0,
    Max = 1000,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        WalkSpeedValue = Value
    end
})

LeftGroupBox:AddSlider('JumpPower', {
    Text = 'Jump Power',
    Default = 0,
    Min = 0,
    Max = 1000,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        jumppowerValue = Value
    end
})

local Players = game:GetService("Players")
local mobs = workspace.Main.Live:GetChildren()
local ValuesEnemie = {} -- Adiciona declaração para ValuesEnemie
local printedNames = {}

for _, mob in ipairs(mobs) do
    if not Players:FindFirstChild(mob.Name) and not printedNames[mob.Name] then
        table.insert(ValuesEnemie, mob.Name) -- Alterei de 'mob' para 'mob.Name'
        printedNames[mob.Name] = true
    end
end

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Farm')

-- Dropdown para selecionar inimigo
LeftGroupBox:AddDropdown('Enemie', {
    Values = ValuesEnemie,
    Default = "None",
    Multi = false,
    Text = 'Choose Mob',
    Callback = function(value)
        selectedEnemie = value
    end
})

-- Iniciar a coroutine para o ataque automático
coroutine.wrap(autoAtaque)()

-- Toggle para ativar/desativar o ataque automático
LeftGroupBox:AddToggle('AutoKillMob', {
    Text = 'Auto Kill Mob',
    Default = false,
    Callback = function(enabled)
        autoAttackEnabled = enabled
    end
})


LeftGroupBox:AddSlider('Distance', {
    Text = 'Distance of mob',
    Default = 0,
    Min = -100,
    Max = 30,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        selectedDistance = Value
    end
})

LeftGroupBox:AddButton({
    Text = 'Refresh Enemie Dropdown',
    Func = function(ValuesEnemie)
        Enemie:Refresh(ValuesEnemie)
    end,
        DoubleClick = false,
})

local quest = game:GetService("Players").LocalPlayer.QuestRemoteEvents
local children = quest:GetChildren()
local ValuesQuets = {}

-- Adicionando as quests à tabela ValuesQuets
for _, child in ipairs(children) do
    table.insert(ValuesQuets, child.Name)
end

-- Adicionando a dropdown para selecionar a quest
LeftGroupBox:AddDropdown('Quest', {
    Values = ValuesQuets,
    Default = "None",
    Multi = false,
    Text = 'Choose Quest',
    Callback = function(value)
        selectedQuest = value
    end
})

-- Variável para controlar o estado do ataque automático
local autoquestEnabled = false

-- Adicionando o toggle para ativar/desativar o ataque automático
LeftGroupBox:AddToggle('AutoQuest', {
    Text = 'Auto Get Quest',
    Default = false,
    Callback = function(Value)
        getgenv().autogetquest = Value
        autogetquest()
    end
})

LeftGroupBox:AddLabel('Select Quest And The Mob\n\To Farm 100% AFK', true)


LeftGroupBox:AddToggle('DragonBall', {
    Text = 'Auto Get Dragon Ball',
    Default = false,
    Callback = function(Value)
        getgenv().autogetdragonball = Value
        autogetdragonball()
    end
})


local RightGroupBox = Tabs.Main:AddRightGroupbox('Stats')

RightGroupBox:AddToggle('Auto Strength Stats', {
    Text = 'Auto Strength Stats',
    Default = false,
    Callback = function(Value)
        getgenv().autostatsS = Value
        autostatsS()
    end
})

RightGroupBox:AddToggle('Auto Ki Power Stats', {
    Text = 'Auto Ki Power Stats',
    Default = false,
    Callback = function(Value)
        getgenv().autostatsPK = Value
        autostatsPK()
    end
})

RightGroupBox:AddToggle('Auto Max Health Stats', {
    Text = 'Auto Max Health Stats',
    Default = false,
    Callback = function(Value)
        getgenv().autostatsH = Value
        autostatsH()
    end
})

RightGroupBox:AddToggle('Auto Max Ki Stats', {
    Text = 'Auto Max Ki Stats',
    Default = false,
    Callback = function(Value)
        getgenv().autostatsMK = Value
        autostatsMK()
    end
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Skills')


-- Código para preencher a lista de ataques
local ataque = game:GetService("Players").LocalPlayer.Backpack
local children = ataque:GetChildren()
local ValuesAtaque = {} -- Adiciona declaração para ValuesAtaque

for i, child in ipairs(children) do
    table.insert(ValuesAtaque, child.Name)
end


RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = 'Choose Skill',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddDropdown('Skill', {
    Values = ValuesAtaque,
    Default = "None",
    Multi = false,
    Text = '',
    Callback = function(value)
        selectedAtaque = value
    end
})

RightGroupBox:AddButton({
    Text = 'Refresh Skills Dropdown',
    Func = function()
        RightGroupBox:FindChild('Skill'):Refresh(ValuesAtaque)
    end,
    DoubleClick = false,
})


-- Define FPS-related variables
local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection

-- Create a function to update FPS and ping information
local function UpdateWatermark()
    FrameCounter = FrameCounter + 1

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end

-- Connect the function to the RenderStepped event
WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(UpdateWatermark)

-- Create tabs for UI settings
local TabsUI = {
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Unload function
local function Unload()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end

-- UI Settings
local MenuGroup = TabsUI['UI Settings']:AddLeftGroupbox('Menu')

-- Add an unload button
MenuGroup:AddButton('Unload', Unload)

-- Add a label and key picker for the menu keybind
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

-- Define the ToggleKeybind variable
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/Dragon_Soul')

SaveManager:BuildConfigSection(TabsUI['UI Settings'])

ThemeManager:ApplyToTab(TabsUI['UI Settings'])

SaveManager:LoadAutoloadConfig()

local GameConfigName = '_Dragon_Soul'
local player = game.Players.LocalPlayer
SaveManager:Load(player.Name .. GameConfigName)
spawn(function()
    while task.wait(1) do
        if Library.Unloaded then
            break
        end
        SaveManager:Save(player.Name .. GameConfigName)
    end
end)

-- Disable player idling
for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
warn('[TEMPEST HUB] Loaded')
